using System;
using System.Collections.Generic;

// مدل کتاب
public class Book
{
    public int Id { get; set; }
    public string Title { get; set; }
    public decimal Price { get; set; }
}


// 1. SRP: این کلاس فقط وظیفه مدیریت کتاب‌ها را دارد.
public class BookRepository
{
    private List<Book> books = new List<Book>
    {
        new Book { Id = 1, Title = "C# in Depth", Price = 30 },
        new Book { Id = 2, Title = "Clean Code", Price = 40 },
        new Book { Id = 3, Title = "Design Patterns", Price = 50 }
    };

    public List<Book> GetBooks() => books;
}

// SRP: این کلاس فقط مسئول مدیریت سبد خرید است.
public class ShoppingCart
{
    private List<Book> cart = new List<Book>();

    public void AddToCart(Book book)
    {
        cart.Add(book);
        Console.WriteLine($"Book '{book.Title}' added to cart.");
    }

    public List<Book> GetCart() => cart;
}

// 2. OCP: روش‌های پرداخت جدید بدون تغییر کلاس موجود اضافه می‌شوند.
public interface IPaymentMethod
{
    void ProcessPayment(decimal amount);
}

public class PayIRPayment : IPaymentMethod
{
    public void ProcessPayment(decimal amount)
    {
        Console.WriteLine($"Paid {amount:C} using Pay.IR.");
    }
}

public class ZarinPalPayment : IPaymentMethod
{
    public void ProcessPayment(decimal amount)
    {
        Console.WriteLine($"Paid {amount:C} using ZarinPal.");
    }
}

public class SnappPayPalPayment : IPaymentMethod
{
    public void ProcessPayment(decimal amount)
    {
        Console.WriteLine($"Paid {amount:C} using SnappPay.");
    }
}

// 3. LSP: تمام زیرکلاس‌های BookRepository جایگزین کلاس پایه می‌شوند.
public class DiscountedBookRepository : BookRepository
{
    // اعمال تخفیف روی کتاب‌ها
    public List<Book> GetDiscountedBooks()
    {
        var books = GetBooks();
        books.ForEach(book => book.Price *= 0.9m); // اعمال 10% تخفیف
        return books;
    }
}

// 4. ISP: واسط‌های جداگانه برای عملیات پرداخت و گزارش‌گیری.
public interface IReportGenerator
{
    void GenerateReport(List<Book> books);
}

public class PdfReportGenerator : IReportGenerator
{
    public void GenerateReport(List<Book> books)
    {
        Console.WriteLine("\nPDF Report:");
        foreach (var book in books)
        {
            Console.WriteLine($"- {book.Title}: ${book.Price}");
        }
    }
}

public class ExcelReportGenerator : IReportGenerator
{
    public void GenerateReport(List<Book> books)
    {
        Console.WriteLine("\nExcel Report:");
        foreach (var book in books)
        {
            Console.WriteLine($"- {book.Title}: ${book.Price}");
        }
    }
}


// واسط برای عملیات عمومی کاربران
public interface IUser
{
    void RegisterUser();
    void Login();
}

// واسط برای عملیات فروشندگان
public interface ISeller
{
    void ManageInventory();
}

// واسط برای عملیات ادمین‌ها
public interface IAdmin
{
    void GenerateSalesReport();
}


// کاربران عادی
public class Customer : IUser
{
    public void RegisterUser()
    {
        Console.WriteLine("Customer registered.");
    }

    public void Login()
    {
        Console.WriteLine("Customer logged in.");
    }
}

// فروشندگان
public class Seller : IUser, ISeller
{
    public void RegisterUser()
    {
        Console.WriteLine("Seller registered.");
    }

    public void Login()
    {
        Console.WriteLine("Seller logged in.");
    }

    public void ManageInventory()
    {
        Console.WriteLine("Inventory managed by seller.");
    }
}

// ادمین‌ها
public class Admin : IUser, IAdmin
{
    public void RegisterUser()
    {
        Console.WriteLine("Admin registered.");
    }

    public void Login()
    {
        Console.WriteLine("Admin logged in.");
    }

    public void GenerateSalesReport()
    {
        Console.WriteLine("Sales report generated by admin.");
    }
}

// 5. DIP: وابستگی از طریق واسط‌ها مدیریت می‌شود.
public class Checkout
{
    private readonly IPaymentMethod _paymentMethod;

    public Checkout(IPaymentMethod paymentMethod)
    {
        _paymentMethod = paymentMethod;
    }

    public void CompletePayment(decimal amount)
    {
        _paymentMethod.ProcessPayment(amount);
    }
}


// برنامه اصلی
class Program
{
    static void Main(string[] args)
    {
        // SRP: استفاده از BookRepository برای نمایش لیست کتاب‌ها
        var bookRepository = new BookRepository();
        var books = bookRepository.GetBooks();

        Console.WriteLine("Available Books:");
        foreach (var book in books)
        {
            Console.WriteLine($"{book.Id}. {book.Title} - ${book.Price}");
        }

        // SRP: مدیریت سبد خرید
        var cart = new ShoppingCart();
        cart.AddToCart(books[0]);
        cart.AddToCart(books[1]);

        // OCP: انتخاب روش پرداخت
        Console.WriteLine("\nChoose Payment Method: 1 for Pay.IR, 2 for ZarinPal");
        int choice = int.Parse(Console.ReadLine());
        IPaymentMethod paymentMethod = choice == 1 ? new PayIRPayment() : (IPaymentMethod)new ZarinPalPayment();

        var checkout = new Checkout(paymentMethod);

        // محاسبه قیمت کل
        decimal totalAmount = 0;
        foreach (var book in cart.GetCart())
        {
            totalAmount += book.Price;
        }

        Console.WriteLine($"\nTotal Amount: ${totalAmount}");
        checkout.CompletePayment(totalAmount);

        // ISP: گزارش‌گیری
        Console.WriteLine("\nChoose Report Type: 1 for PDF, 2 for Excel");
        int reportChoice = int.Parse(Console.ReadLine());
        IReportGenerator reportGenerator = reportChoice == 1 ? new PdfReportGenerator() : (IReportGenerator)new ExcelReportGenerator();
        reportGenerator.GenerateReport(cart.GetCart());
    }
}
